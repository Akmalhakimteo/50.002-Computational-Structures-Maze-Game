/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input usb_rx,
    output reg [7:0] row,
    output reg [7:0] red,
    output reg [7:0] green
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam A_state = 4'd0;
  localparam B_state = 4'd1;
  localparam C_state = 4'd2;
  localparam D_state = 4'd3;
  localparam E_state = 4'd4;
  localparam F_state = 4'd5;
  localparam G_state = 4'd6;
  localparam H_state = 4'd7;
  localparam I_state = 4'd8;
  localparam J_state = 4'd9;
  localparam K_state = 4'd10;
  localparam L_state = 4'd11;
  localparam M_state = 4'd12;
  localparam N_state = 4'd13;
  localparam O_state = 4'd14;
  localparam P_state = 4'd15;
  
  reg [3:0] M_state_d, M_state_q = A_state;
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [8-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_dnc;
  multi_dec_ctr_3 dec_ctr (
    .clk(clk),
    .rst(rst),
    .dnc(M_dec_ctr_dnc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_game_machine_win_sig;
  wire [1-1:0] M_game_machine_lose_sig;
  wire [3-1:0] M_game_machine_xloc_out;
  wire [3-1:0] M_game_machine_yloc_out;
  wire [1-1:0] M_game_machine_decctr_decrease;
  reg [1-1:0] M_game_machine_up_button;
  reg [1-1:0] M_game_machine_down_button;
  reg [1-1:0] M_game_machine_left_button;
  reg [1-1:0] M_game_machine_right_button;
  reg [1-1:0] M_game_machine_hint_button;
  beta_4 game_machine (
    .clk(clk),
    .rst(rst),
    .up_button(M_game_machine_up_button),
    .down_button(M_game_machine_down_button),
    .left_button(M_game_machine_left_button),
    .right_button(M_game_machine_right_button),
    .hint_button(M_game_machine_hint_button),
    .win_sig(M_game_machine_win_sig),
    .lose_sig(M_game_machine_lose_sig),
    .xloc_out(M_game_machine_xloc_out),
    .yloc_out(M_game_machine_yloc_out),
    .decctr_decrease(M_game_machine_decctr_decrease)
  );
  wire [1-1:0] M_ctr_value;
  counter_5 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  reg [19:0] M_counter_d, M_counter_q = 1'h0;
  wire [1-1:0] M_edge_dt_btn_up_out;
  reg [1-1:0] M_edge_dt_btn_up_in;
  edge_detector_6 edge_dt_btn_up (
    .clk(clk),
    .in(M_edge_dt_btn_up_in),
    .out(M_edge_dt_btn_up_out)
  );
  wire [1-1:0] M_btn_con_up_out;
  reg [1-1:0] M_btn_con_up_in;
  buttoncon_7 btn_con_up (
    .clk(clk),
    .in(M_btn_con_up_in),
    .out(M_btn_con_up_out)
  );
  wire [1-1:0] M_edge_dt_btn_down_out;
  reg [1-1:0] M_edge_dt_btn_down_in;
  edge_detector_6 edge_dt_btn_down (
    .clk(clk),
    .in(M_edge_dt_btn_down_in),
    .out(M_edge_dt_btn_down_out)
  );
  wire [1-1:0] M_btn_con_down_out;
  reg [1-1:0] M_btn_con_down_in;
  buttoncon_7 btn_con_down (
    .clk(clk),
    .in(M_btn_con_down_in),
    .out(M_btn_con_down_out)
  );
  wire [1-1:0] M_edge_dt_btn_left_out;
  reg [1-1:0] M_edge_dt_btn_left_in;
  edge_detector_6 edge_dt_btn_left (
    .clk(clk),
    .in(M_edge_dt_btn_left_in),
    .out(M_edge_dt_btn_left_out)
  );
  wire [1-1:0] M_btn_con_left_out;
  reg [1-1:0] M_btn_con_left_in;
  buttoncon_7 btn_con_left (
    .clk(clk),
    .in(M_btn_con_left_in),
    .out(M_btn_con_left_out)
  );
  wire [1-1:0] M_edge_dt_btn_right_out;
  reg [1-1:0] M_edge_dt_btn_right_in;
  edge_detector_6 edge_dt_btn_right (
    .clk(clk),
    .in(M_edge_dt_btn_right_in),
    .out(M_edge_dt_btn_right_out)
  );
  wire [1-1:0] M_btn_con_right_out;
  reg [1-1:0] M_btn_con_right_in;
  buttoncon_7 btn_con_right (
    .clk(clk),
    .in(M_btn_con_right_in),
    .out(M_btn_con_right_out)
  );
  wire [1-1:0] M_edge_dt_btn_hint_out;
  reg [1-1:0] M_edge_dt_btn_hint_in;
  edge_detector_6 edge_dt_btn_hint (
    .clk(clk),
    .in(M_edge_dt_btn_hint_in),
    .out(M_edge_dt_btn_hint_out)
  );
  wire [1-1:0] M_btn_con_hint_out;
  reg [1-1:0] M_btn_con_hint_in;
  buttoncon_7 btn_con_hint (
    .clk(clk),
    .in(M_btn_con_hint_in),
    .out(M_btn_con_hint_out)
  );
  
  wire [8-1:0] M_rom_map;
  reg [4-1:0] M_rom_address;
  reg [1-1:0] M_rom_clk;
  reg [1-1:0] M_rom_rst;
  maze_map_rom_16 rom (
    .address(M_rom_address),
    .clk(M_rom_clk),
    .rst(M_rom_rst),
    .map(M_rom_map)
  );
  
  wire [3-1:0] M_reg_xlocation;
  wire [3-1:0] M_reg_ylocation;
  wire [3-1:0] M_reg_templocation_1;
  wire [3-1:0] M_reg_templocation_2;
  wire [16-1:0] M_reg_out_a;
  wire [16-1:0] M_reg_out_b;
  wire [16-1:0] M_reg_out_c;
  reg [1-1:0] M_reg_clk;
  reg [1-1:0] M_reg_rst;
  reg [5-1:0] M_reg_write_addres;
  reg [5-1:0] M_reg_write_addres_1;
  reg [1-1:0] M_reg_we;
  reg [1-1:0] M_reg_we_1;
  reg [16-1:0] M_reg_data;
  reg [5-1:0] M_reg_read_address_a;
  reg [5-1:0] M_reg_read_address_b;
  reg [5-1:0] M_reg_read_address_c;
  regfile_17 L_reg (
    .clk(M_reg_clk),
    .rst(M_reg_rst),
    .write_addres(M_reg_write_addres),
    .write_addres_1(M_reg_write_addres_1),
    .we(M_reg_we),
    .we_1(M_reg_we_1),
    .data(M_reg_data),
    .read_address_a(M_reg_read_address_a),
    .read_address_b(M_reg_read_address_b),
    .read_address_c(M_reg_read_address_c),
    .xlocation(M_reg_xlocation),
    .ylocation(M_reg_ylocation),
    .templocation_1(M_reg_templocation_1),
    .templocation_2(M_reg_templocation_2),
    .out_a(M_reg_out_a),
    .out_b(M_reg_out_b),
    .out_c(M_reg_out_c)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    io_led = io_dip;
    M_btn_con_up_in = io_button[0+0-:1];
    M_edge_dt_btn_up_in = M_btn_con_up_out;
    M_game_machine_up_button = M_edge_dt_btn_up_out;
    M_btn_con_down_in = io_button[2+0-:1];
    M_edge_dt_btn_down_in = M_btn_con_down_out;
    M_game_machine_down_button = M_edge_dt_btn_down_out;
    M_btn_con_left_in = io_button[3+0-:1];
    M_edge_dt_btn_left_in = M_btn_con_left_out;
    M_game_machine_left_button = M_edge_dt_btn_left_out;
    M_btn_con_right_in = io_button[4+0-:1];
    M_edge_dt_btn_right_in = M_btn_con_right_out;
    M_game_machine_right_button = M_edge_dt_btn_right_out;
    M_btn_con_hint_in = io_button[1+0-:1];
    M_edge_dt_btn_hint_in = M_btn_con_hint_out;
    M_game_machine_hint_button = M_edge_dt_btn_hint_out;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_reg_read_address_b = 1'h0;
    M_reg_read_address_a = 1'h0;
    M_reg_read_address_c = 1'h0;
    M_reg_rst = rst;
    M_reg_we = 1'h0;
    M_reg_we_1 = 1'h0;
    M_reg_data = 1'h0;
    M_reg_write_addres = 1'h0;
    M_reg_write_addres_1 = 1'h0;
    M_reg_clk = clk;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_dec_ctr_dnc = M_game_machine_decctr_decrease;
    M_seg_values = M_dec_ctr_digits;
    if (io_button[1+0-:1]) begin
      io_led[16+7-:8] = M_rom_map;
    end else begin
      io_led[16+0+2-:3] = M_game_machine_yloc_out;
      io_led[16+3+4-:5] = 1'h0;
    end
    M_rom_address = io_dip[8+7-:8];
    M_rom_clk = clk;
    M_rom_rst = rst;
    io_led[8+0+2-:3] = M_game_machine_xloc_out;
    io_led[8+3+4-:5] = 1'h0;
    io_led[0+7-:8] = M_rom_map;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_counter_d = M_counter_q + 1'h1;
    row = 8'h00;
    red = 8'hff;
    green = 8'hff;
    
    case (M_state_q)
      A_state: begin
        M_rom_address = 4'h0;
        row[0+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = B_state;
        end
      end
      B_state: begin
        M_rom_address = 4'h1;
        row[1+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = C_state;
        end
      end
      C_state: begin
        M_rom_address = 4'h2;
        row[2+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = D_state;
        end
      end
      D_state: begin
        M_rom_address = 4'h3;
        row[3+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = E_state;
        end
      end
      E_state: begin
        M_rom_address = 4'h4;
        row[4+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = F_state;
        end
      end
      F_state: begin
        M_rom_address = 4'h5;
        row[5+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = G_state;
        end
      end
      G_state: begin
        M_rom_address = 4'h6;
        row[6+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = H_state;
        end
      end
      H_state: begin
        M_rom_address = 4'h7;
        row[7+0-:1] = 1'h1;
        red = M_rom_map;
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = I_state;
        end
      end
      I_state: begin
        row[0+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h0) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = J_state;
        end
      end
      J_state: begin
        row[1+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h1) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = K_state;
        end
      end
      K_state: begin
        row[2+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h2) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = L_state;
        end
      end
      L_state: begin
        row[3+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h3) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = M_state;
        end
      end
      M_state: begin
        row[4+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h4) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = N_state;
        end
      end
      N_state: begin
        row[5+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h5) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = O_state;
        end
      end
      O_state: begin
        row[6+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h6) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = P_state;
        end
      end
      P_state: begin
        row[7+0-:1] = 1'h1;
        if (M_game_machine_yloc_out == 3'h7) begin
          if (M_game_machine_xloc_out == 3'h0) begin
            green = 8'h7f;
          end
          if (M_game_machine_xloc_out == 3'h1) begin
            green = 8'hbf;
          end
          if (M_game_machine_xloc_out == 3'h2) begin
            green = 8'hdf;
          end
          if (M_game_machine_xloc_out == 3'h3) begin
            green = 8'hef;
          end
          if (M_game_machine_xloc_out == 3'h4) begin
            green = 8'hf7;
          end
          if (M_game_machine_xloc_out == 3'h5) begin
            green = 8'hfb;
          end
          if (M_game_machine_xloc_out == 3'h6) begin
            green = 8'hfd;
          end
          if (M_game_machine_xloc_out == 3'h7) begin
            green = 8'hfe;
          end
        end
        if (M_counter_q[15+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = A_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
    
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
